snippet import "import { ... } from '...';" b
import \{ ${1:ClassName} } from '${2:${3:./library/}${1/(^[A-Z])|[A-Z]/(?1::-)\l$0/g}}';
endsnippet

snippet importp "import { Page } from '../pages/page/page'" b
import \{ ${1:MyPage}PageModule } from '../pages/${2:${1/(^[A-Z])|[A-Z]/(?1::-)\l$0/g}}/${3:${1/(^[A-Z])|[A-Z]/(?1::-)\l$0/g}.module}';
endsnippet

snippet /* "Comment block" b
/**
 * ${1}
 */
endsnippet

snippet .tc "then ... catch" i
.then ((${1:property}) => {
	${3:// Then code}
})${2:.catch ((error) => {
	${4:// FIXME: Handle errors
	console.log ('error');
	console.log (error);}
})};

endsnippet

snippet arf "Arrow function" i
(${1:arguments}) => {
	${2:// Code...}
}
endsnippet

snippet comp "Angular component"
import { Component } from '@angular/core';
${5:// Imports}

@Component ({
	selector: '${1:prefix-}${2:`!v substitute (vim_snippets#Filename (), '.component', '', 'g')`}',
	template: \`${0}\`
})
export class ${3:${2/(^|-)(\w)/\u$2/g}}Component {
	/* Properties */

	public constructor (${4:/* Providers */}) {}

	/* Methods */
}
endsnippet

snippet gs "Getters and Setter"
public get ${1:attributeName} () : ${2:string} {
	return ${3:this._$1};
}

public set $1 (value : $2) {
	${4:this._$1 = ${5:value}};
}
endsnippet

snippet testtpl "Test template"
${4:/* Stubs */}
import { DebugElement }             from '@angular/core';
import { ComponentFixture, TestBed} from '@angular/core/testing';
import { async }                    from '@angular/core/testing';
import { By }                       from '@angular/platform-browser';

import { IonicModule } from 'ionic-angular';

import { MyApp } from '../../app/app.component';
import { ${1:Some}${2:Component} } from './${1/(^[A-Z])|[A-Z]/(?1::-)\l$0/g}';
${3:/* Local imports */
}
const PRFX = '${1/(^[A-Z])|[A-Z]/(?1::-)\l$0/g}';

describe ('$2: ${1/(^[A-Z])|[A-Z]/(?1:$0: \l$0)/g}', () => {
	let component    : $1$2;
	let fixture      : ComponentFixture<$1$2>;
	let debugElement : DebugElement;
	let element      : HTMLElement;

	beforeEach (async (() => {
		TestBed.configureTestingModule ({
			declarations: [MyApp, $1$2],
			imports: [IonicModule.forRoot (MyApp)],
			providers: [${5}]
		}).compileComponents ();
	}));

	beforeEach (() => {
		fixture      = TestBed.createComponent ($1$2);
		component    = fixture.componentInstance;
		debugElement = fixture.debugElement;
		element      = debugElement.nativeElement;

		fixture.detectChanges ();
	});

	afterEach (() => {
		fixture.destroy ();
	});

	it ('should be created', () => {
		expect (fixture).toBeTruthy ();
		expect (component).toBeTruthy ();
	});

	${6:/* Tests */}
});
endsnippet

snippet describe "Describe debug code"
describe ('${1:description}', () => {
	${2:/* Code */}
});
endsnippet

snippet beforeEach "Before each debug code"
beforeEach (${1:() => {
	${2:/* Code */}
}});

endsnippet

snippet afterEach "After each debug code"
afterEach (${1:() => {
	${2:/* Code */}
}});

endsnippet

snippet it "It debug code"
it ('${1:description}', () => {
	${2:/* Code */}
});

endsnippet

snippet expect "Jasmine expectation"
expect (${1:'expect description'}).${2:toEqual} (${3:'expectation'});
endsnippet
