snippet import "import { ... } from '...';" b
import \{ ${1:ClassName} } from '${2:./library/}${1/(^[A-Z])|[A-Z]/(?1::-)\l$0/g}';
endsnippet

snippet importp "import { Page } from '../pages/page/page'" b
import \{ ${1:MyPage}Page } from '../pages/${2:${1/.*/\L$0\E/}}/${3:${1/.*/\L$0\E/}}';
endsnippet

snippet /* "Comment block" b
/**
 * ${1}
 */
endsnippet

snippet .tc "then ... catch" i
.then (${1:property} => {
	${2:// Then code}
}).catch(error => {
	${3:// FIXME: Handle errors
	console.log ('error');
	console.log (error);}
});
endsnippet

snippet arf "Arrow function" i
${1:(${2:arguments})} => {
	${3:// Code...}
}
endsnippet

snippet comp "Angular component"
import { Component } from '@angular/core';
${5:// Imports}

@Component ({
	selector: '${1:prefix-}${2:`!v substitute(vim_snippets#Filename(), '.component', '', 'g')`}',
	template: \`${0}\`
})
export class ${3:${2/(^|-)(\w)/\u$2/g}}Component {
	/* Properties */

	public constructor (${4:/* Providers */}) {}

	/* Methods */
}
endsnippet

snippet testtpl "Test template"
${4:/* Stubs */}
import { TestBed, ComponentFixture, async } from '@angular/core/testing';
import { IonicModule } from 'ionic-angular';

import { MyApp } from '../../app/app.component';
import { ${1:Some}${2:Component} } from './${1/(^[A-Z])|[A-Z]/(?1::-)\l$0/}';
${3:/* Local imports */}

describe('$2: ${1/[A-Z]/ $0/} $2', () => {
	let component : $1$2;
	let fixture : ComponentFixture<$1$2>;
	let debugElement : DebugElement;
	let element : HTMLElement;

	beforeEach(async(() => {
		TestBed.configureTestingModule({
			declarations: [MyApp, $1$2],
			providers: [${5}],
			imports: [IonicModule.forRoot(MyApp)]
		}).compileComponents();
	}));

	beforeEach(() => {
		fixture = TestBed.createComponent($1$2);
		component = fixture.componentInstance;
	});

	afterEach(() => {
		fixture.destroy();
		component = null;
		debugElement = null;
		element = null;
	});

	it('should be created', () => {
		expect(fixture).toBeTruthy();
		expect(component).toBeTruthy();
	});

	${6:/* Tests */}
});
endsnippet

snippet describe "Describe debug code"
describe ('${1:description}', () => {
	${2:/* Code */}
});
endsnippet

snippet beforeEach "Before each debug code"
beforeEach (${1:() => {
	${2:/* Code */}
}});
endsnippet

snippet it "It debug code"
it ('${1:description}', () => {
	${2:/* Code */}
});
endsnippet
